#include <pthread.h>
#include <semaphore.h>
#include <stdio.h>
#include <stdlib.h>

#define BUFFER_SIZE 5
#define PRODUCERS 2
#define CONSUMERS 2

int buffer[BUFFER_SIZE];
int in = 0, out = 0;

sem_t empty, full;
pthread_mutex_t mutex;

void* producer(void* arg) {
    int item;
    for (int i = 0; i < 10; i++) {
        item = rand() % 100; // 模拟生产数据
        sem_wait(&empty);    // 等待空位
        pthread_mutex_lock(&mutex);
        
        buffer[in] = item;
        printf("[Producer %ld] 生产 %d 到位置 %d\n", (long)arg, item, in);
        in = (in + 1) % BUFFER_SIZE;
        
        pthread_mutex_unlock(&mutex);
        sem_post(&full);     // 增加已填充信号
    }
    return NULL;
}

void* consumer(void* arg) {
    int item;
    for (int i = 0; i < 10; i++) {
        sem_wait(&full);     // 等待数据
        pthread_mutex_lock(&mutex);
        
        item = buffer[out];
        printf("[Consumer %ld] 消费 %d 从位置 %d\n", (long)arg, item, out);
        out = (out + 1) % BUFFER_SIZE;
        
        pthread_mutex_unlock(&mutex);
        sem_post(&empty);    // 释放空位
    }
    return NULL;
}

int main() {
    pthread_t prod_threads[PRODUCERS], cons_threads[CONSUMERS];
    
    // 初始化信号量和互斥锁
    sem_init(&empty, 0, BUFFER_SIZE);
    sem_init(&full, 0, 0);
    pthread_mutex_init(&mutex, NULL);
    
    // 创建生产者和消费者线程
    for (long i = 0; i < PRODUCERS; i++)
        pthread_create(&prod_threads[i], NULL, producer, (void*)i);
    for (long i = 0; i < CONSUMERS; i++)
        pthread_create(&cons_threads[i], NULL, consumer, (void*)i);
    
    // 等待所有线程结束
    for (int i = 0; i < PRODUCERS; i++)
        pthread_join(prod_threads[i], NULL);
    for (int i = 0; i < CONSUMERS; i++)
        pthread_join(cons_threads[i], NULL);
    
    // 清理资源
    sem_destroy(&empty);
    sem_destroy(&full);
    pthread_mutex_destroy(&mutex);
    
    return 0;
}